
#import kai("sys")

#library "llvm"
#foreign llvm {
    trap :: () -> void #linkname "llvm.trap"
    printf :: (format: *u8, args: #cvargs ..any) -> i32
}

Write :: fn(fd: sys.FileDescriptor, bytes: []u8) -> i64 {
    return autocast sys.Write(fd, autocast bytes.raw, bytes.len)
}

Read :: fn(fd: sys.FileDescriptor, buffer: *[]u8) -> void {
    bytesRead := sys.Read(fd, buffer.raw, buffer.cap)
    if bytesRead < 0 trap()
    buffer.len += cast(u64) bytesRead
}

Seek :: fn(fd: sys.FileDescriptor, offset: i64, whence: sys.FileSeek) -> i64 {
    return autocast sys.Syscall3(sys.Syscall.Lseek, autocast fd, autocast offset, autocast whence)
}

Open :: fn(path: *u8, flags: sys.FileFlags) -> sys.FileDescriptor {
    return autocast sys.Syscall2(sys.Syscall.Open, autocast path, autocast flags)
}

Close :: fn(fd: sys.FileDescriptor) -> i32 {
    return autocast sys.Syscall1(sys.Syscall.Close, autocast fd)
}

Mmap :: fn(addr: rawptr, len: u64, prot: i32, flags: i32, fd: sys.FileDescriptor, offset: u64) -> rawptr {
    return autocast sys.Syscall6(sys.Syscall.Mmap, autocast addr, autocast len, autocast prot, autocast flags, autocast fd, autocast offset)
}

#test "Read file fills buffer" {
    fd := Open(#file.raw, sys.FileFlags.RDONLY); defer Close(fd)
    buf := ([50]u8{})[:]
    buf.len = 0
    Read(fd, &buf)
    assert(buf.len == 50)
}
